// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package goserbench

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB0f55b16DecodeBitbucketOrgYuuki0xffGoapptraceCodecBenchmarks(in *jlexer.Lexer, out *A) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = int64(in.Int64())
		case "Tag":
			out.Tag = uint8(in.Uint8())
		case "Timestamp":
			out.Timestamp = int64(in.Int64())
		case "Frames":
			if in.IsNull() {
				in.Skip()
				out.Frames = nil
			} else {
				in.Delim('[')
				if out.Frames == nil {
					if !in.IsDelim(']') {
						out.Frames = make([]uint64, 0, 8)
					} else {
						out.Frames = []uint64{}
					}
				} else {
					out.Frames = (out.Frames)[:0]
				}
				for !in.IsDelim(']') {
					var v1 uint64
					v1 = uint64(in.Uint64())
					out.Frames = append(out.Frames, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GID":
			out.GID = int64(in.Int64())
		case "TxID":
			out.TxID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB0f55b16EncodeBitbucketOrgYuuki0xffGoapptraceCodecBenchmarks(out *jwriter.Writer, in A) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"Tag\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Tag))
	}
	{
		const prefix string = ",\"Timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"Frames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Frames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Frames {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Uint64(uint64(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"GID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.GID))
	}
	{
		const prefix string = ",\"TxID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.TxID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v A) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB0f55b16EncodeBitbucketOrgYuuki0xffGoapptraceCodecBenchmarks(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v A) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB0f55b16EncodeBitbucketOrgYuuki0xffGoapptraceCodecBenchmarks(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *A) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB0f55b16DecodeBitbucketOrgYuuki0xffGoapptraceCodecBenchmarks(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *A) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB0f55b16DecodeBitbucketOrgYuuki0xffGoapptraceCodecBenchmarks(l, v)
}
